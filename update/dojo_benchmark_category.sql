begin;
update public.dojo_benchmark_category set name='V7: Криптография', objective='Убедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям:\r\n\r\n* Криптографические модули выходят из строя безопасным образом, и ошибки корректно обрабатываются.\r\n* Используется соответствующий генератор случайных чисел.\r\n* Обеспечивается контроль доступа к ключам.' where id=1;
update public.dojo_benchmark_category set name='V2: Аутентификация', objective='Аутентификация — это действие по установлению или подтверждению подлинности кого-либо (или чего-либо) и того, что утверждения, сделанные человеком или устройством, верны, защищены от подмены и предотвращают восстановление или перехват паролей. Убедитесь, что проверяемое приложение удовлетворяет следующим концептуальным требованиям:\r\n\r\n Проверяет цифровую подлинность отправителя сообщения. Гарантирует, что только уполномоченные лица могут проходить аутентификацию, а учетные данные передаются безопасным образом.' where id=2;
update public.dojo_benchmark_category set name='V1: Архитектура', objective='В идеальном мире безопасность должна учитываться на всех этапах разработки. Однако в действительности безопасность часто рассматривается только на позднем этапе разработки SDLC. Помимо технических средств контроля, ASVS требует наличия процессов, гарантирующих, что вопросы безопасности были явно учтены при планировании архитектуры приложения или API, а также известны функциональные роли и роли безопасности всех компонентов. Поскольку одностраничные приложения действуют как клиенты для удаленных API или служб, необходимо убедиться, что соответствующие стандарты безопасности также применяются к этим службам — изолированного тестирования приложения недостаточно.\r\n\r\nВ категории перечислены требования, относящиеся к архитектуре и дизайну приложения. Таким образом, это единственная категория, которая не соответствует техническим тестам в Руководстве по тестированию OWASP. Чтобы охватить такие темы, как моделирование угроз, безопасный SDLC, управление ключами, пользователям ASVS следует ознакомиться с соответствующими проектами OWASP и/или другими стандартами, такими как приведенные ниже.' where id=3;
update public.dojo_benchmark_category set name='V3: Управление сессиями', objective='Одним из основных компонентов любого web-приложения или API с отслеживанием состояния является механизм, с помощью которого оно контролирует и поддерживает состояние пользователя или устройства, взаимодействующего с ним. Это называется управлением сессиями и определяется как набор всех элементов управления, регулирующих взаимодействие с полным состоянием между пользователем и веб-приложением.\r\n\r\n Убедитесь, что проверяемое приложение удовлетворяет следующим концептуальным требованиям к управлению сессиями:\r\n\r\n* Сессии уникальны для каждого пользователя, их идентификаторы нельзя угадать, и ими нельзя «поделиться» с другими.\r\n* Сессии становятся недействительными, когда они больше не нужны, т.е. при бездействии пользователя срок действия сессии истекает.' where id=4;
update public.dojo_benchmark_category set name='V4: Контроль доступа', objective='Авторизация — это концепция предоставления доступа к ресурсам только тем, кому разрешено их использовать. Убедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям:\r\n\r\n* Те, кто получает доступ к ресурсам, имеют действующие учётные записи.\r\n* Пользователи имеют четко определенный набор ролей и привилегий.\r\n* Метаданные ролей и разрешений защищены от воспроизведения или подделки.' where id=5;
update public.dojo_benchmark_category set name='V5: Валидация, санитизация и кодирование', objective='Наиболее распространенным недостатком безопасности web-приложений является неспособность должным образом проконтролировать входные данные, поступающие от клиента или среды, перед их непосредственным использованием без какой-либо кодировки. Это приводит почти ко всем существенным уязвимостям в web-приложениях, таким как межсайтовый скриптинг (XSS), инъекции SQL и команд, атаки, связанные с кодировкой, атаки на файловую систему и переполнение буфера.\r\n\r\nУбедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям: \r\n\r\n*  Все входные данные проверяются на правильность и пригодность для предполагаемой цели.\r\n* Данным от внешнего объекта или клиента никогда не следует доверять, и с ними следует обращаться соответствующим образом.' where id=6;
update public.dojo_benchmark_category set name='V8: Логирование и обработка ошибок', objective='Основная цель обработки ошибок и ведения журнала — дать полезную информацию пользователям, администраторам и группам реагирования на инциденты. Цель журнала не в том, чтобы регистрировать в нем как можно больше записей, а в полезности каждой отдельной записи, и в улучшении отношения сигнал/шум.\r\n\r\nКачественные журналы часто содержат конфиденциальную информацию и должны быть защищены в соответствии с местными законами о конфиденциальности. Меры защиты журнала должны включать:\r\n\r\n* Не собирать и не регистрировать в журналах конфиденциальную информацию, если этого не требуется.\r\n* Обеспечивать безопасную обработку и защиту регистрируемой в журналах информации в соответствии с ее категорией.\r\n* Убедиться, что журналы не хранятся вечно, и имеют как можно более короткий срок хранения.\r\n\r\nЕсли журналы содержат персональные или другие чувствительные данные, определение которых варьируется от страны к стране, то они становятся одной из наиболее привлекательных целей для злоумышленников в приложении.' where id=7;
update public.dojo_benchmark_category set name='V9: Защита информации', objective='Есть три ключевых элемента надежной защиты данных: конфиденциальность, целостность и доступность. В данном стандарте предполагается, что защита данных обеспечивается в доверенной системе, например, на сервере, укрепленном достаточным набором мер защиты.\r\n\r\nПриложение должно считать, что все пользовательские устройства так или иначе скомпрометированы. Если приложение передает или хранит конфиденциальную информацию на небезопасных устройствах, таких как компьютеры, телефоны и планшеты, приложение несет ответственность за то, чтобы информация, хранящаяся на этих устройствах, была зашифрована и не могла быть легко получена незаконным путем, изменена или разглашена.\r\n\r\nУбедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям к защите информации:\r\n\r\n*\tКонфиденциальность: информация должна быть защищена от несанкционированного просмотра или разглашения как при передаче, так и при хранении.\r\n*\tЦелостность: информация должна быть защищена от несанкционированной регистрации, изменения или удаления неуполномоченными лицами.\r\n*\tДоступность: информация должна быть доступна авторизованным пользователям по мере необходимости.' where id=8;
update public.dojo_benchmark_category set name='V10: Передача данных', objective='Убедитесь, что исследуемое приложение соответствует следующим концептуальным требованиям:\r\n\r\n* Там, где передаются конфиденциальные данные, используется TLS.\r\n* Во всех случаях используются надежные алгоритмы и шифры.' where id=9;
update public.dojo_benchmark_category set name='V13: Вредоносный код', objective='Убедитесь, что ваш код удовлетворяет следующим концептуальным требованиям:\r\n\r\n* Вредоносная активность надёжно и безопасно сдерживается, чтобы не повлиять на остальную часть приложения.\r\n* Не имеет «бомб отложенного действия» или других атак, основанных на времени.\r\n* Не «звонит домой» злонамеренным или неразрешённым адресатам.\r\n* В нём нет лазеек, «пасхальных яиц», атак «салями», руткитов или несанкционированного кода, которым может управлять злоумышленник.\r\n\r\nВредоносный код встречается крайне редко, и его трудно обнаружить. Построчный просмотр кода вручную может помочь в поиске логических бомб, но даже самый опытный рецензент едва ли найдет вредоносный код, даже если знает, что он есть. Соблюдение требований этого раздела невозможно без полного доступа к исходному коду, включая сторонние библиотеки.' where id=10;
update public.dojo_benchmark_category set name='V15: Бизнес логика', objective='Убедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям:\r\n\r\n* Поток бизнес-логики является последовательным, обрабатывается по порядку, и его нельзя обойти.\r\n* Бизнес-логика включает ограничения для обнаружения и предотвращения автоматизированных атак, таких как многократно повторяющиеся денежные переводы незначительных сумм или добавление миллиона друзей по одному за раз и т.д.\r\n* Ключевые потоки бизнес-логики учитывают возможность злоупотреблений и злонамеренных действий и имеют защиту от несанкционированного доступа, разглашения и искажения информации и атак с повышением привилегий.' where id=11;
update public.dojo_benchmark_category set name='V16: Файлы и ресурсы', objective='Убедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям:\r\n\r\n* Недоверенные данные файлов должны обрабатываться соответствующим и безопасным образом.\r\n* Недоверенные данные файлов, полученные из недоверенных источников, хранятся вне корневого каталога webroot и с ограниченными разрешениями.' where id=12;
update public.dojo_benchmark_category set name='V18: API и web-сервисы', objective='Убедитесь, что исследуемое приложение, использующее веб-службы на основе RESTful или SOAP, имеет:\r\n\r\n* Адекватную аутентификацию, управление сессиями и авторизацию всех веб-служб\r\n* Входную проверку всех параметров, которые передаются из более низкого на более высокий уровень доверия\r\n* Базовую совместимость уровня веб-сервисов SOAP для продвижения использования API.' where id=13;
update public.dojo_benchmark_category set name='V19: Конфигурация', objective='* Обновленные библиотеки и платформы.\r\n* Безопасная конфигурация по умолчанию.\r\n* Достаточная защита, чтобы инициированные пользователем изменения конфигурации по умолчанию не демонстрировали без необходимости и не создавали слабых мест или недостатков безопасности в базовых системах.' where id=14;
update public.dojo_benchmark_category set name='V20: Интернет вещей', objective='Встраиваемые / IoT-устройства должны:\r\n\r\n* Обеспечивать тот же уровень безопасности на устройстве, что и на сервере, применяя меры безопасности в доверенной среде.\r\n* Конфиденциальные данные, хранящиеся на устройстве, должны храниться безопасным образом с использованием аппаратного хранилища, например, Secure Element.\r\n* Все конфиденциальные данные, передаваемые с устройства, должны использовать безопасность транспортного уровня (TLS).' where id=15;
update public.dojo_benchmark_category set name='V13: API и web-сервисы', objective='Убедитесь, что исследуемое приложение, использующее API на уровне доверенного сервиса (обычно это JSON, XML или GraphQL), имеет:\n\n* Адекватную аутентификацию, управление сессиями и авторизацию для всех web-сервисов.\n* Форматно-логический контроль всех входных параметров, которые передаются с более низкого уровня доверия на более высокий.\n* Эффективные меры безопасности для всех типов API, включая облачные и бессерверные API.\n\nПожалуйста, воспринимайте эту главу в контексте с другими главами; мы больше не дублируем требования аутентификации или управления сессиями для API.' where id=16;
update public.dojo_benchmark_category set name='V10: Вредоносный код', objective='Убедитесь, что ваш код удовлетворяет следующим концептуальным требованиям:\r\n\r\n* Вредоносная активность надёжно и безопасно сдерживается, чтобы не повлиять на остальную часть приложения.\r\n* Не имеет «бомб отложенного действия» или других атак, основанных на времени.\r\n* Не «звонит домой» злонамеренным или неразрешённым адресатам.\r\n* В нём нет лазеек, «пасхальных яиц», атак «салями», руткитов или несанкционированного кода, которым может управлять злоумышленник.\n\nОбнаружение вредоносного кода является «доказательством от противного», в котором нельзя удостовериться полностью. Следует приложить все силы для обеспечения гарантии того, что ваш код не содержит встроенного вредоносного кода или недокументированных возможностей.' where id=17;
update public.dojo_benchmark_category set name='V14: Конфигурация', objective='Убедитесь, что исследуемое приложение имеет:\n\n* Безопасную, воспроизводимую, автоматизированную среду сборки.\n* Усиленный контроль над библиотеками, зависимостями и конфигурациями сторонних разработчиков таким образом, чтобы устаревшие или небезопасные компоненты не включались в приложение.\n* Конфигурация безопасности по умолчанию, такая что администраторам и пользователям приходится ослаблять состояние безопасности по умолчанию.\n\n Конфигурация приложения по умолчанию должна быть безопасной для работы в Интернете, что означает безопасную конфигурацию «из коробки».' where id=18;
update public.dojo_benchmark_category set name='V6: Криптография', objective='Убедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям:\n\n* Криптографические модули выходят из строя безопасным образом, и ошибки корректно обрабатываются.\n* Используется соответствующий генератор случайных чисел.\n* Обеспечивается контроль доступа к ключам.' where id=19;
update public.dojo_benchmark_category set name='V9: Передача данных', objective='Убедитесь, что исследуемое приложение соответствует следующим концептуальным требованиям:\n\n* Требует TLS или шифрования, независимо от конфиденциальности обрабатываемой информации.\n* Следует последним рекомендациям в части безопасных конфигураций, предпочтительных алгоритмов и шифров.\n* Избегает нестойких или устаревающих алгоритмов и шифров, за исключением крайних случаев.\n* Отключает небезопасные алгоритмы и шифры.\n\n Будьте в курсе рекомендаций по безопасной конфигурации TLS, поскольку они часто меняется («часто» из-за катастрофических проблем, обнаруживаемых в существующих алгоритмах и шифрах). Используйте самые последние версии инструментов анализа конфигурации TLS, чтобы настроить предпочтительный порядок и выбор алгоритмов. Периодически проверяйте конфигурацию, чтобы убедиться, что данные передаются надёжно и безопасно.' where id=20;
update public.dojo_benchmark_category set name='V4: Контроль доступа', objective='Авторизация — это концепция предоставления доступа к ресурсам только тем, кому разрешено их использовать. Убедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям:\n\n* PТе, кто получает доступ к ресурсам, имеют действующие учётные записи.\n* Пользователи имеют четко определенный набор ролей и привилегий.\n* Метаданные ролей и разрешений защищены от воспроизведения или подделки.' where id=21;
update public.dojo_benchmark_category set name='V3: Управление сессиями', objective='Одним из основных компонентов любого web-приложения или API с отслеживанием состояния является механизм, с помощью которого оно контролирует и поддерживает состояние пользователя или устройства, взаимодействующего с ним. Управление сессиями превращает протокол без сохранения состояния в протокол с его сохранением, что имеет решающее значение для разграничения пользователей или устройств.\n\n Убедитесь, что проверяемое приложение удовлетворяет следующим концептуальным требованиям к управлению сессиями:\n\n* Сессии уникальны для каждого пользователя, их идентификаторы нельзя угадать, и ими нельзя «поделиться» с другими.\n* Сессии становятся недействительными, когда они больше не нужны, т.е. при бездействии пользователя срок действия сессии истекает.\n\n Как отмечалось ранее, эти требования были адаптированы для соответствия подмножеству мер в NIST 800-63b, ориентированных на наиболее распространенные угрозы и часто эксплуатируемые недостатки аутентификации. Предыдущие требования проверки были упразднены, были удалены их дубликаты или, в большинстве случаев, они были адаптированы, чтобы полностью соответствовать цели обязательного [NIST 800-63b] (https://pages.nist.gov/800-63-3/sp800- 63b.htmlx) требования.' where id=22;
update public.dojo_benchmark_category set name='V7: Логирование и обработка ошибок', objective='Основная цель обработки ошибок и ведения журнала — дать полезную информацию пользователям, администраторам и группам реагирования на инциденты. Цель журнала не в том, чтобы регистрировать в нем как можно больше записей, а в полезности каждой отдельной записи, и в улучшении отношения сигнал/шум.\n\nКачественные журналы часто содержат конфиденциальную информацию и должны быть защищены в соответствии с местными законами о конфиденциальности. Меры защиты журнала должны включать:\n\n* Не собирать и не регистрировать в журналах конфиденциальную информацию, если этого не требуется.\n* Обеспечивать безопасную обработку и защиту регистрируемой в журналах информации в соответствии с ее категорией.\n* Убедиться, что журналы не хранятся вечно, и имеют как можно более короткий срок хранения.\n\n Если журналы содержат персональные или другие чувствительные данные, определение которых варьируется от страны к стране, то они становятся одной из наиболее привлекательных целей для злоумышленников в приложении.\n\nТакже важно убедиться, что и при сбоях приложение ведет себя безопасно, не раскрывая избыточной информации в тексте ошибок.' where id=23;
update public.dojo_benchmark_category set name='V8: Защита информации', objective='Есть три ключевых элемента надежной защиты данных: конфиденциальность, целостность и доступность. В данном стандарте предполагается, что защита данных обеспечивается в доверенной системе, например, на сервере, укрепленном достаточным набором мер защиты.\r\n\r\nПриложение должно считать, что все пользовательские устройства так или иначе скомпрометированы. Если приложение передает или хранит конфиденциальную информацию на небезопасных устройствах, таких как компьютеры, телефоны и планшеты, приложение несет ответственность за то, чтобы информация, хранящаяся на этих устройствах, была зашифрована и не могла быть легко получена незаконным путем, изменена или разглашена.\r\n\r\nУбедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям к защите информации:\r\n\r\n*\tКонфиденциальность: информация должна быть защищена от несанкционированного просмотра или разглашения как при передаче, так и при хранении.\r\n*\tЦелостность: информация должна быть защищена от несанкционированной регистрации, изменения или удаления неуполномоченными лицами.\r\n*\tДоступность: информация должна быть доступна авторизованным пользователям по мере необходимости.' where id=24;
update public.dojo_benchmark_category set name='V2: Аутентификация', objective='Аутентификация — это действие по установлению или подтверждению подлинности кого-либо (или чего-либо) и того, что утверждения, сделанные человеком или устройством, верны, защищены от подмены и предотвращают восстановление или перехват паролей.\n\nКогда ASVS был впервые опубликован, имя пользователя и пароль были наиболее распространенной формой аутентификации (за исключением систем, содержащих сведения, составляющие государственную тайну). Многофакторная аутентификация (МФА) была широко известна в узких кругах специалистов, но редко применялась. По мере увеличения количества взломов идея о том, что имена пользователей каким-то образом конфиденциальны, а пароли неизвестны, оказалась несостоятельной (вместе с мерами безопасности, которые на ней основывались). Например, NIST 800-63 рассматривает имена пользователей и аутентификацию на основе знаний — Knowledge Based Authentication (KBA) — как общедоступную информацию; уведомления по SMS и электронной почте — как «ограниченные» типы аутентификаторов, а все пароли — как предварительно взломанные. Эта реальность делает бесполезными аутентификаторы, основанные на знаниях, восстановление по SMS и электронной почте, историю паролей, сложность и контроль ротации. Эти меры и раньше были не очень полезными, часто вынуждая пользователей каждые несколько месяцев придумывать такие же слабые пароли, но когда счет взломанных учетных записей пошёл на миллиарды, пришло время двигаться дальше.\n\n Из всех глав ASVS больше всего изменились главы об аутентификации и управлении сессиями. Внедрение эффективной, основанной на фактических данных передовой практики для многих будет сложной задачей, и это совершенно нормально. Мы должны начать переход к пост-парольному будущему уже сейчас.' where id=25;
update public.dojo_benchmark_category set name='V12: Файлы и ресурсы', objective='Убедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям:\n\n* Недоверенные данные файлов должны обрабатываться соответствующим и безопасным образом.\n* Недоверенные данные файлов, полученные из недоверенных источников, хранятся вне корневого каталога webroot и с ограниченными разрешениями.' where id=26;
update public.dojo_benchmark_category set name='V1: Архитектура', objective='Во многих организациях архитектура безопасности сегодня стала почти забытым занятием. Слава корпоративных архитекторов в эпоху DevSecOps проходит. Область безопасности приложений должна подхватить это знамя, и, адаптируясь к принципам Agile, представить свои передовые принципы архитектуры безопасности разработчикам программного обеспечения. Архитектура — это не реализация, а способ осмысления проблемы, которая потенциально имеет много разных решений и не имеет единственного правильного ответа.Часто безопасность считается негибкой, требуя, чтобы разработчики исправляли код определённым образом, однако разработчики часто могут знать гораздо лучший способ решения. Не существует единого простого решения в архитектуре, и делать вид, что это не так, — медвежья услуга разработчикам программного обеспечения.\n\nКонкретная реализация web-приложения, возможно, будет постоянно меняться на протяжении всего его жизненного цикла, но общая архитектура, скорее всего, будет меняться редко, и развиваться медленно. Так же и архитектура безопасности — аутентификация нужна нам сегодня, и завтра, и через пять лет. Если мы примем правильные решения сегодня, то сможем сэкономить много сил, времени и средств, выбрав и повторно используя архитектурно-совместимые решения. Например, лет десять назад многофакторная аутентификация почти не применялась.\n\n Если бы разработчики вложились в единую защищённую модель поставщика удостоверений, такую как федеративные удостоверения SAML, её можно было бы обновить, включив только новые требования, например, из стандарта NIST 800-63, без изменения интерфейсов исходного приложения. Если множество приложений имеют общую архитектуру безопасности и, следовательно, общие компоненты, то все они получат выгоду от этого обновления одновременно. Однако SAML не всегда будет лучшим или наиболее подходящим решением для аутентификации — возможно, его придётся заменить другими решениями по мере изменения требований. Подобные изменения либо сложны, либо настолько дорогостоящи, что требуют полной переделки, либо совершенно невозможны без архитектуры безопасности.\n\nВ этой главе ASVS охватывает основные аспекты правильной архитектуры безопасности: доступность, конфиденциальность, целостность обработки, неотказуемость и конфиденциальность. Каждый из этих принципов безопасности должен быть встроен во все приложения. Крайне важно «двигаться влево», начиная с поддержки разработчиков с помощью чек-листов безопасного программирования, наставничества и обучения, разработки и тестирования, сборки, развёртывания, конфигурирования и эксплуатации, и заканчивая приёмо-сдаточным тестированием, чтобы убедиться, что все необходимые меры безопасности приняты и они работают. Раньше этот последний шаг и был всем, что мы делали. Но теперь этого недостаточно, ведь разработчики выпускают код в промышленную среду десятки или сотни раз в день. Специалисты по безопасности приложений должны идти в ногу с гибкими методами, что означает изучение инструментов разработки, обучение программированию и совместную работу с разработчиками, а не критику проекта спустя месяцы после того, как все остальные продвинулись дальше.' where id=27;
update public.dojo_benchmark_category set name='V5: Валидация, санитизация и кодирование', objective='Наиболее распространенным недостатком безопасности web-приложений является неспособность должным образом проконтролировать входные данные, поступающие от клиента или среды, перед их непосредственным использованием без какой-либо кодировки. Это приводит почти ко всем существенным уязвимостям в web-приложениях, таким как межсайтовый скриптинг (XSS), инъекции SQL и команд, атаки, связанные с кодировкой, атаки на файловую систему и переполнение буфера.\n\n Убедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям:\n\n* Архитектура контроля входных и кодирования выходных данных имеет согласованный конвейер для предотвращения атак с использованием инъекций.\n* Входные данные строго типизируются, контролируется их логическая непротиворечивость, проверяются допустимая размерность или диапазон значений, или, как минимум, они нейтрализуются или фильтруются.\n* Выходные данные кодируются или экранируются в соответствии с контекстом данных как можно ближе к интерпретатору.\n\nПри современной архитектуре web-приложений кодирование выходных данных становится важным как никогда. В некоторых случаях сложно обеспечить надёжный контроль входных данных, поэтому использование более безопасных API, таких как параметризованные запросы, автоматически экранирующие шаблоны или тщательно подобранная кодировка для выходных данных, имеют решающее значение для безопасности приложения.' where id=28;
update public.dojo_benchmark_category set name='V11: Бизнес логика', objective='Убедитесь, что исследуемое приложение удовлетворяет следующим концептуальным требованиям:\n\n* Поток бизнес-логики является последовательным, обрабатывается по порядку, и его нельзя обойти.\n* Бизнес-логика включает ограничения для обнаружения и предотвращения автоматизированных атак, таких как многократно повторяющиеся денежные переводы незначительных сумм или добавление миллиона друзей по одному за раз и т.д.\n* Ключевые потоки бизнес-логики учитывают возможность злоупотреблений и злонамеренных действий и имеют защиту от несанкционированного доступа, разглашения и искажения информации и атак с повышением привилегий.' where id=29;
commit;
